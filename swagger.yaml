openapi: 3.0.0    
info:
  version: 1.0.0
  title: Korapay Incoming Webhook
externalDocs:
  url: https://api.korapay.com/incoming-webhooks
servers:
  - url: https://hooks.korapay.com
tags:
- name: auth
  description: Authentication API
- name: users
  description: users API
- name: questions
  description: questions API
- name: answers
  description: answers question API
- name: comments
  description: comments  API
- name: ratings
  description: rate question and reply API
- name: subscriptions
  description: subscriptions  API
- name: notifications
  description: notifications  API


paths:
# Login
  /auth/login:
    post:
      tags:
      - auth
      summary: Authenticate User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userLogin'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'  

  # sign up
  /auth/signup:
    post:
      tags:
      - auth
      summary: Authenticate User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error' 

  /auth/logout:
      post:
        tags:
        - auth
        summary: log out User          
        responses:
          201:
            description: 'Created'
          400:
            description: 'Bad Request'
          409:
            description: 'Conflict'
          500:
            description: 'Server Error'  

  # [GET] users
  /users:
    get:
      tags:
      - users
      summary: Find All Users
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

  # [GET] users/id
  /users/{id}:
    get:
      tags:
      - users
      summary: Find User By Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [PUT] users/id
    put:
      security:
        - bearerAuth: []
      tags:
      - users
      summary: Update User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userUpdate'
     
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [DELETE] users/id
    delete:
      security:
        - bearerAuth: []
      tags:
      - users
      summary: Delete User By Id
      parameters:
      - name: id
        in: path
        description: questions Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] questions
  /questions:
    get:
      tags:
      - questions
      summary: Find All questions
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'
    post:
      security:
        - bearerAuth: []
      tags:
      - questions
      summary: Post question
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/questions'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'  

  # [GET] users/id
  /questions/{id}:
    get:
      tags:
      - questions
      summary: Find question By Id
      parameters:
      - name: id
        in: path
        description: questions Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'


    # [PUT] users/id
    put:
      security:
        - bearerAuth: []
      tags:
      - questions
      summary: Update questions By Id
      parameters:
      - name: id
        in: path
        description: questions Id
        required: true
        type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/questions'
     
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [DELETE] question/id
    delete:
      security:
        - bearerAuth: []
      tags:
      - questions
      summary: Delete questions By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

            # [GET] questions users/id
  /questions/user/{id}:
    get:
      tags:
      - questions
      summary: Find user question By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

 # [GET] reply
  /answers:
    get:
      tags:
      - answers
      summary: Find All answers
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'
    post:
      security:
        - bearerAuth: []
      tags:
      - answers
      summary: Post answers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/answers'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'  
  # [GET] ratings/id
  /answers/{id}:
    get:
      tags:
      - answers
      summary: Find answers By Id
      parameters:
      - name: id
        in: path
        description: reply Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [PUT] answers/id
    put:
      security:
        - bearerAuth: []
      tags:
      - answers
      summary: Update answers By Id
      parameters:
      - name: id
        in: path
        description: reply Id
        required: true
        type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/answersUpdate'
     
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [DELETE] answers/id
    delete:
      security:
        - bearerAuth: []
      tags:
      - answers
      summary: Delete answers By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'     
  
# [GET] ratings
  /ratings:
    get:
      tags:
      - ratings
      summary: Find All rate
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'
    post:
      security:
        - bearerAuth: []
      tags:
      - ratings
      summary: Post rate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ratings'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'  

  # [GET] ratings/id
  /ratings/{id}:
    get:
      tags:
      - ratings
      summary: Find rate By Id
      parameters:
      - name: id
        in: path
        description: rate Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [PUT] ratings/id
    put:
      security:
        - bearerAuth: []
      tags:
      - ratings
      summary: Update rate By Id
      parameters:
      - name: id
        in: path
        description: rate Id
        required: true
        type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ratingsUpdate'
     
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [DELETE] ratings/id
    delete:
      security:
        - bearerAuth: []
      tags:
      - ratings
      summary: Delete rate By Id
      parameters:
      - name: id
        in: path
        description: rate Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error' 



  # [GET] subscriptions
  /subscriptions:
    get:
      tags:
      - subscriptions
      summary: Find All subscriptions
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'
    post:
      security:
        - bearerAuth: []
      tags:
      - subscriptions
      summary: Post subscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subscriptions'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'  

  # [GET] subscription/id
  /subscriptions/{id}:
    get:
      tags:
      - subscriptions
      summary: Find subscription By Id
      parameters:
      - name: id
        in: path
        description: subscriptions Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [PUT] subscriptions/id
    put:
      security:
        - bearerAuth: []
      tags:
      - subscriptions
      summary: Update subscriptions By Id
      parameters:
      - name: id
        in: path
        description: rate Id
        required: true
        type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subscriptionsUpdate'
     
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [DELETE] subscriptions/id
    delete:
      security:
        - bearerAuth: []
      tags:
      - subscriptions
      summary: Delete subscriptions By Id
      parameters:
      - name: id
        in: path
        description: subscriptions Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error' 

           
# [GET] notifications
  /notifications:
    get:
      tags:
      - notifications
      summary: Find All notifications
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'
    post:
      security:
        - bearerAuth: []
      tags:
      - notifications
      summary: Post notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notifications'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'  

  # [GET] notifications/id
  /notifications/{id}:
    get:
      tags:
      - notifications
      summary: Find notifications By Id
      parameters:
      - name: id
        in: path
        description: notifications Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [PUT] notifications/id
    put:
      security:
        - bearerAuth: []
      tags:
      - notifications
      summary: Update notifications By Id
      parameters:
      - name: id
        in: path
        description: rate Id
        required: true
        type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notificationsUpdate'
     
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [DELETE] notifications/id
    delete:
      security:
        - bearerAuth: []
      tags:
      - notifications
      summary: Delete notifications By Id
      parameters:
      - name: id
        in: path
        description: notifications Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'     
          
          
# [GET] comments
  /comments:
    get:
      tags:
      - comments
      summary: Find All comments
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'
    post:
      security:
        - bearerAuth: []
      tags:
      - comments
      summary: Post comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comments'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'  

  # [GET] comments/id
  /comments/{id}:
    get:
      tags:
      - comments
      summary: Find comments By Id
      parameters:
      - name: id
        in: path
        description: comments Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [PUT] comments/id
    put:
      security:
        - bearerAuth: []
      tags:
      - comments
      summary: Update comment By Id
      parameters:
      - name: id
        in: path
        description: rate Id
        required: true
        type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/commentsUpdate'
     
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

    # [DELETE] comments/id
    delete:
      security:
        - bearerAuth: []
      tags:
      - comments
      summary: Delete comments By Id
      parameters:
      - name: id
        in: path
        description: comments Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error' 

      
components:
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT   
  schemas:
    userLogin:
      title: Login data
      type: object
      properties:
        email:
          type: string
          description: user Email
        password:
          type: string
          description: user password
      required:
          - email
          - password
    users:
      title: User data
      type: object
      required:
          - email
          - password
          - username
      properties:
        email:
          type: string
          description: user Email
        username:
          type: string
          description: user Username
        password:
          type: string
          description: user Password
        firstName:
          type: string
          description: user First name 
        lastName:
          type: string
          description: user Last name

    userUpdate:
      title: User data
      type: object
      properties:
        username:
          type: string
          description: user Username
        firstName:
          type: string
          description: user First name 
        lastName:
          type: string
          description: user Last name
    questions:
      title: question data
      type: object
      required:
          - question
          - title
      properties:
        question:
          type: string
          description: question Question
        tags:
          type: string
          description: question tags separated by commas
        title:
          type: string
          description: title of question
    
    answers:
      title: reply data
      type: object
      required:
          - answer
          - questionId
      properties:
        reply:
          type: string
          description: answers Question
        questionId:
          type: integer
          description: Question
      
    answersUpdate:
      title: answer update data
      type: object
      required:
          - reply
      properties:
        reply:
          type: string
          description: answer Question  

    ratings:
      title: rating data
      type: object
      required:
          - ratings
      properties:
        type:
          type: string [question or reply]
          description: question or reply
        vote:
          type: sting [up|down]
          description: vote
        modelId:
          type: integer
          description: question or reply id

    ratingsUpdate:
      title: update rating data
      type: object
      required:
          - ratings
      properties:
        vote:
          type: sting [up|down]
          description: vote

    subscriptions:
      title: rating data
      type: object
      required:
          - questionId
          - userId
          - isSubscribed
      properties:
        questionId:
          type: integer
          description: subscription or reply
        isSubscribed:
          type: boolean
          description: is subscribed

    subscriptionsUpdate:
      title: update rating data
      type: object
      required:
        - isSubscribed
      properties:
        isSubscribed:
          type: boolean
          description: is subscribed

    notifications:
      title: rating data
      type: object
      required:
          - replyId
          - subscriptionId
          - isViewed
      properties:
        replyId:
          type: integer
          description: notifications or reply
        subscriptionId:
          type: integer
          description: notifications or reply
        isViewed:
          type: boolean
          description: is viewed

    notificationsUpdate:
      title: update notification data
      type: object
      required:
        - isViewed
      properties:
        isViewed:
          type: boolean
          description: is viewed
 
    comments:
      title: create comment data
      type: object
      required:
        - message
        - answerId
      properties:
        isViewed:
          message: string
          description: is viewed
        answerId:
          type: integer
          description: is viewed

    commentsUpdate:
      title: update comment data
      type: object
      required:
        - message
      properties:
        isViewed:
          message: string
          description: is viewed
  
           
     